[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2020 Andrew Singleton  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/articles/scorecards.html","id":"what-is-a-score-card","dir":"Articles","previous_headings":"","what":"What is a score card?","title":"Score card generation","text":"Score cards provide quick overview performance one forecast model compared another. shows model better performance range scores statistical significance differences. statistical significance computed pooling data , example, forecast date, computing score pool sampling pools, replacement, compute mean score. process repeated n times using bootstrap method, difference forecast models mean score calculated n bootstrap replicates. proportion scores better one model another gives confidence difference. example shows score card comparing many parameters range scores two forecast models, named “Model ” “Model B”.","code":""},{"path":"/articles/scorecards.html","id":"score-card-generation","dir":"Articles","previous_headings":"","what":"Score card generation","title":"Score card generation","text":"process generating score card involves several steps: Reading forecast data Selecting common cases forecast model Reading observation data Joining observation data forecast data Bootstrapping verification steps repeated parameter results can joined together single object score card plotted. first go compute data single parameter, case 2m temperature, harp “T2m”. use data MEPS_prod AROME_Arctic_prod deterministic models harpData package. Since data include one forecast, pool scores observation station. don’t already harpData package install : Note harpData contains close 1GB data may take time download. Now can begin score card generation… score card eventually plotted information “confidence differences” data frame result. don’t really need familiar content data frame, except note ‘fcst_model’ ‘ref_model’ column names want choose values columns come plot data.","code":"remotes::install_github(\"harphub/harpData\") library(harp) #> Loading required package: harpIO #> Loading required package: harpCore #>  #> Attaching package: 'harpCore' #> The following object is masked from 'package:stats': #>  #>     filter #> Loading required package: harpPoint #> Loading required package: harpVis #> Loading required package: ggplot2 #> Loading required package: shiny #> Loading required package: harpSpatial param <- \"T2m\"  # Read the forecast data fcst <- read_point_forecast(   dttm       = seq_dttm(2019021700, 2019021718, \"6h\"),   fcst_model = c(\"AROME_Arctic_prod\", \"MEPS_prod\"),   fcst_type  = \"det\",   parameter  = param,   file_path  = system.file(\"FCTABLE/deterministic\", package = \"harpData\") )  # Select the common cases fcst <- common_cases(fcst)  # Read the observations obs <- read_point_obs(   unique_valid_dttm(fcst),   param,    obs_path = system.file(\"OBSTABLE\", package = \"harpData\"),   stations = unique_stations(fcst) )  # Join the observations to the forecast fcst <- join_to_fcst(fcst, obs)  # Bootstrap the score. Since we use the parameter argument to select the  # parameter column in the data, we need to tell the function to use the  # param variable as a column name rather than a variable. We do this by # wrapping in double curly brackets.  result <- bootstrap_verify(   fcst,    det_verify,         # the function we want to use in the verification   {{param}},   n         = 100,     # the number of bootstrap replicates   pool_by   = \"SID\" )  result #> ::det_summary_scores:: # A tibble: 136 × 17 #>    fcst_model ref_model         lead_time score ref_score_mean ref_score_median #>    <chr>      <chr>                 <dbl> <chr>          <dbl>            <dbl> #>  1 MEPS_prod  AROME_Arctic_prod         0 bias           0.114            0.118 #>  2 MEPS_prod  AROME_Arctic_prod         0 mae            0.639            0.662 #>  3 MEPS_prod  AROME_Arctic_prod         0 rmse           0.994            1.04  #>  4 MEPS_prod  AROME_Arctic_prod         0 stde           0.988            1.03  #>  5 MEPS_prod  AROME_Arctic_prod         3 bias           0.270            0.266 #>  6 MEPS_prod  AROME_Arctic_prod         3 mae            1.35             1.38  #>  7 MEPS_prod  AROME_Arctic_prod         3 rmse           2.01             2.04  #>  8 MEPS_prod  AROME_Arctic_prod         3 stde           1.99             2.02  #>  9 MEPS_prod  AROME_Arctic_prod         6 bias           0.358            0.352 #> 10 MEPS_prod  AROME_Arctic_prod         6 mae            1.52             1.52  #> # ℹ 126 more rows #> # ℹ 11 more variables: ref_score_upper <dbl>, ref_score_lower <dbl>, #> #   fcst_score_mean <dbl>, fcst_score_median <dbl>, fcst_score_upper <dbl>, #> #   fcst_score_lower <dbl>, difference_mean <dbl>, difference_median <dbl>, #> #   difference_upper <dbl>, difference_lower <dbl>, percent_better <dbl> #>  #> --harp verification for T2m-- #>  # for forecasts from 00:00 UTC 17 feb. 2019 to 18:00 UTC 17 feb. 2019 #>  # using 181 observation stations #>  # for verification groups:  #>     -> lead_time"},{"path":"/articles/scorecards.html","id":"multiple-parameters","dir":"Articles","previous_headings":"Score card generation","what":"Multiple parameters","title":"Score card generation","text":"Now computed data one parameter, multiple parameters? write loop around code, isn’t flexible. preferable turn function can reuse use R’s lapply function apply new function multiple parameters. Let’s start making function, sure hard code anything - need arguments start end dates (start_date end_date), frequency forecasts (), names forecast models (fcst_model), forecast type (whether ensemble forecasts deterministic: fcst_type), paths forecasts observations (fcst_path obs_path), number bootstrap replicates (n), pool scores (pool_by), course parameter (param). Since small amount data example need set minimum number cases something small (min_cases) ensure function runs. also add groupings argument, default value “leadtime”, use later example. Now function can call multiple parameters using lapply output scorecard_data list, one element parameter. can plot score card, need bind elements single element using bind_point_verif. Now can plot score card using harpVis::plot_scorecard. need tell function model want assess model use reference. also need tell function scores want include score card.","code":"scorecard_function <- function(   param,   dttm,   fcst_model,   fcst_type,    fcst_path,   obs_path,    n,    pool_by,   min_cases,   groupings = \"lead_time\" ) {      # Output some information to the user   message(\"\\n\")   message(\"Generating scorecard data for \", param)   message(\"==============================\", rep(\"=\", nchar(param)), \"\\n\")        fcst <- read_point_forecast(     dttm       = dttm,     fcst_model = fcst_model,     fcst_type  = fcst_type,     parameter  = param,     file_path  = fcst_path   )      fcst <- common_cases(fcst)      obs <- read_point_obs(     dttm       = unique_valid_dttm(fcst),     parameter  = param,      obs_path   = obs_path,     stations   = unique_stations(fcst)   )      # If no obervations were found return NULL   if (nrow(obs) < 1) return(NULL)      fcst <- join_to_fcst(fcst, obs)      if (fcst_type == \"det\") {     bootstrap_verify(       fcst,        det_verify,               {{param}},       n         = n,            pool_by   = pool_by,       min_cases = min_cases,        groupings = groupings     )   } else {     bootstrap_verify(       fcst,        ens_verify,               {{param}},       n         = n,            pool_by   = pool_by,       min_cases = min_cases,        groupings = groupings     )   }    } parameters <- c(\"T2m\", \"S10m\", \"T850\", \"T700\", \"T500\", \"Td850\", \"Td700\", \"Td500\")  scorecard_data <- lapply(   parameters,    scorecard_function,   dttm       = seq_dttm(2019021700, 2019021718, \"6h\"),   fcst_model = c(\"AROME_Arctic_prod\", \"MEPS_prod\"),   fcst_type  = \"det\",   fcst_path  = system.file(\"FCTABLE/deterministic\", package = \"harpData\"),   obs_path   = system.file(\"OBSTABLE\", package = \"harpData\"),    n          = 100,    pool_by    = \"SID\",   min_cases  = 5 ) scorecard_data <- bind_point_verif(scorecard_data) plot_scorecard(   scorecard_data,    fcst_model = \"AROME_Arctic_prod\",    ref_model  = \"MEPS_prod\",    scores     = c(\"rmse\", \"mae\", \"bias\") )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Singleton. Author, maintainer. Alex Deckmyn. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Singleton , Deckmyn (2024). harp: harp. R package version 0.2.2, https://github.com/harphub/harp.","code":"@Manual{,   title = {harp: harp},   author = {Andrew Singleton and Alex Deckmyn},   year = {2024},   note = {R package version 0.2.2},   url = {https://github.com/harphub/harp}, }"},{"path":[]},{"path":"/index.html","id":"a-framework-for-meteorological-data-in-r","dir":"","previous_headings":"","what":"A framework for meteorological data in R","title":"A framework for meteorogical data","text":"{harp} meta-package attaches functionality {harpIO}, {harpPoint}, {harpVis} {harpSpatial} packages session.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A framework for meteorogical data","text":"","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"harphub/harp\")"},{"path":"/index.html","id":"system-libraries","dir":"","previous_headings":"Installation","what":"System libraries","title":"A framework for meteorogical data","text":"harp packages use {meteogrid} package interpolation geogrid class storing gridded data. package makes use PROJ library handling projections. PROJ installed can install : sudo rights, try installing user local version, speak system administrator. PROJ libraries installed standard location (e.g. /usr/local) {meteogrid} install without problems. However, PROJ libraries non standard location, need tell install function : Alternatively can set environment variables include environment variables .bashrc file, equivalent, won’t need worry wish install update meteogrid. can set compiler linker options file $HOME/.R/Makevars case set worry wish install update {meteogrid}. setting environment variables creating Makevars file, R must restarted changes take effect running remotes::install_github(\"harphub/harp\").","code":"sudo apt-get install libproj-dev remotes::install_github(   \"harphub/harp\",   configure.args = c(     meteogrid = \"--with-proj=/path/to/proj\"   ) ) export PROJ4_DIR=/path/to/proj CPPFLAGS=-I/path/to/proj/include LDFLAGS=-L/path/to/proj/lib -Wl,-rpath,/path/to/proj/lib"},{"path":"/index.html","id":"learning-harp","dir":"","previous_headings":"","what":"Learning harp","title":"A framework for meteorogical data","text":"Currently best learning resource getting started harp 2022 training course website includes number worked examples. plans make online book available 2024 go harp’s functionalities detail.","code":""},{"path":"/news/index.html","id":"harp-v022","dir":"Changelog","previous_headings":"","what":"harp v0.2.2","title":"harp v0.2.2","text":"Hotfixes harpCore, harpIO, harpPoint harpVis","code":""},{"path":"/news/index.html","id":"harpcore-0-2-2","dir":"Changelog","previous_headings":"","what":"harpCore","title":"harp v0.2.2","text":"define_domain() improved can take proj string, e.g. \"+proj=lcc +lon_0=15 +lat_0=63.3 +lat_1=63.3 +lat_2=63.3 +R=6371000\" proj argument. geo_reproject() added enable data frames latitude longitude columns expressed projection coordinates.","code":""},{"path":"/news/index.html","id":"harpio-0-2-2","dir":"Changelog","previous_headings":"","what":"harpIO","title":"harp v0.2.2","text":"New parameters added OBSOUL reading. Partial fix bug resulted errors extracting domain information WRF output files - care taken reading data WRF files fully tested.","code":""},{"path":"/news/index.html","id":"harppoint-0-2-2","dir":"Changelog","previous_headings":"","what":"harpPoint","title":"harp v0.2.2","text":"Fixed bug caused errors check_obs_against_fcst() deterministic forecasts Fixed bug meant lag_forecast() shift_forecast() accept harp >= v0.2.0 column naming convention","code":""},{"path":"/news/index.html","id":"harp-v021","dir":"Changelog","previous_headings":"","what":"harp v0.2.1","title":"harp v0.2.1","text":"Hotfixes harpCore, harpIO harpVis","code":""},{"path":"/news/index.html","id":"harpcore-0-2-1","dir":"Changelog","previous_headings":"","what":"harpCore","title":"harp v0.2.1","text":"Adds functionality generate time sequences seq_secs(), seq_mins(), seq_hours() seq_days()","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"harpIO","what":"Bug fixes","title":"harp v0.2.1","text":"Fix bug whereby read_point_obs() failed accumulation periods available SQLite file Add “ws” list known parameters parse_harp_parameter()","code":""},{"path":"/news/index.html","id":"netcdf-improvements-0-2-1","dir":"Changelog","previous_headings":"harpIO","what":"NetCDF improvements","title":"harp v0.2.1","text":"projection string available, get projection information CF compliant attributes Get dimension names variables. general means dimension names longer need set via netcdf_opts()","code":""},{"path":"/news/index.html","id":"documentation-improvements-0-2-1","dir":"Changelog","previous_headings":"harpIO","what":"Documentation improvements","title":"harp v0.2.1","text":"Vignette added describing read point observations .csv files Extra note added help users install hsf5r package","code":""},{"path":"/news/index.html","id":"harpvis-0-2-1","dir":"Changelog","previous_headings":"","what":"harpVis","title":"harp v0.2.1","text":"Add functionality plot new spatial verification scores","code":""},{"path":"/news/index.html","id":"harp-v020","dir":"Changelog","previous_headings":"","what":"harp v0.2.0","title":"harp v0.2.0","text":"Major updates harp packages. Introduction new package {harpCore} provides classes functionalities common harp packages, including methods geographic transformations via geo_<.> functions fast neighbourhood smoothing gridded fields via nbhd_smooth() function. lot internal changes make things run smoothly.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"harpIO","what":"Breaking changes","title":"harp v0.2.0","text":"Arguments start_date, end_date, read functions deprecated replaced dttm, used together seq_dttm() generate sequence date-time strings. Note can still use old arguments, periodically warned change. New column names outputs read functions bind_fcst() deprecated. bind() used instead. get_filenames() deprecated. generate_filenames() used instead. msub() deprecated. psub() used instead. read_det_interpolate() read_eps_interpolate() defunct. read_forecast(..., transformation = \"interpolate\") used instead. read_obs_convert() defunct. read_obs(..., transformation = \"...\") used instead.","code":""},{"path":"/news/index.html","id":"selected-new-features-0-2-0","dir":"Changelog","previous_headings":"harpIO","what":"Selected new features","title":"harp v0.2.0","text":"Parameters defined via internal data list harp_params. list includes parameter name substitutions different file formats possibility apply function specific parameters read time. parameter list can added modified add_param_def() modify_param_def() respectively. data read harp read functions attain class - print method class tells type dataset . One exception read_obs() read_point_obs(), return basic tibbles (data frames). use_grib_stepRange() added helper select grib messages via grib_opts(param_find = list(param = use_grib_stepRange(...))). useful determining accumulated instantaneous variables grib shortName. {lead_time} can used take current lead time.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-0-2-0-1","dir":"Changelog","previous_headings":"harpPoint","what":"Breaking changes","title":"harp v0.2.0","text":"Default groupings argument changed \"leadtime\" \"lead_time\" consistency changes {harpIO}. Scripts use verification functions \"leadtime\", \"validdate\" \"fcdate\" values groupings changed \"lead_time\", \"valid_dttm\" \"fcst_dttm\" respectively. Verification outputs now use column name fcst_model instead mname consistency throughout harp. Attributes verification outputs changed include forecast dates, stations groupings used verification. scripts make use attributes updated reflect new attributes. scale_point_forecast() scale_point_obs() deprecated. scale_param() used instead. gather_members() spread_members() deprecated. pivot_members() used instead. first_validdate() last_validdate() deprecated. unique_valid_dttm() used instead. pull_stations() deprecated. unique_stations() used instead. bootstrap_score(), pooled_bootstrap_score() bind_bootstrap_score() defunct. bootstrap_verify() bind_point_verif() used instead.","code":""},{"path":"/news/index.html","id":"selected-new-features-0-2-0-1","dir":"Changelog","previous_headings":"harpPoint","what":"Selected new features","title":"harp v0.2.0","text":"Verification functions gained new progress bars generally less verbose , restricting messages progress computing scores different verification groups. New verification score hexbin. gives data frame essentially heat map forecast - observation value pairs. New class, attributes print method verification function outputs. jitter_fcst() now accepts vectorized functions lot faster.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-0-2-0-2","dir":"Changelog","previous_headings":"harpVis","what":"Breaking changes","title":"harp v0.2.0","text":"plot_scatter() soft deprecated. Since data computed verification functions, scatter (accurately hexbin) plots can now made plot_point_verif(..., score = hexbin) plot_station_eps() defunct. plot_station_ts() used instead.","code":""},{"path":"/news/index.html","id":"selected-new-features-0-2-0-2","dir":"Changelog","previous_headings":"harpVis","what":"Selected new features","title":"harp v0.2.0","text":"Plot functions backwards compatible verification data produced old versions {harpPoint} leadtime, mname, fcdate, validdate included column names still work. geom_georaster(), geom_geocontour() geom_geocontour_filled() new functions plotting gridded data using ggplot. upscaling option added enable faster plotting rasters calculation / smoothing contours. Map data plots projected domain gridded data field can retrieved using get_map(). shiny app point verification can now select different time axes recognise plot vertical profile verifications. shiny app point verification gained two new options: full_dir_navigation controls whether modal opened selecting data directories (old behaviour), simply populating dropdown selector. theme allows control overall appearance app can choose “dark”, “light” “white”.","code":""},{"path":"/news/index.html","id":"harp-v009","dir":"Changelog","previous_headings":"","what":"harp v0.0.9","title":"harp v0.0.9","text":"version basically unchanged since late 2021 / early 2022. officially tagged v0.0.9 November 2023","code":""}]
