% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_verif_param.R
\name{make_verif_param}
\alias{make_verif_param}
\title{Make a parameter object for verification}
\usage{
make_verif_param(
  param,
  fcst_param = NULL,
  fcst_scaling = NULL,
  fcst_jitter_func = NULL,
  obs_param = NULL,
  obs_scaling = NULL,
  obs_min = NULL,
  obs_max = NULL,
  obs_error_sd = NULL,
  verif_groups = NULL,
  verif_thresholds = NULL,
  verif_comparator = "ge",
  verif_comp_inc_low = TRUE,
  verif_comp_inc_high = TRUE,
  verif_circle = NULL,
  verif_members = TRUE,
  vertical_coordinate = NA_character_
)
}
\arguments{
\item{param}{The name of the parameter.}

\item{fcst_param}{The name of the parameter to be used for reading forecast
data. If NULL, `param` is used.}

\item{fcst_scaling}{Any scaling to apply to the forecast data. Should be set
with \code{\link{make_scaling}()}.}

\item{fcst_jitter_func}{A function to jitter ensemble forecast data to take
account of observation errors. See \code{\link[harpPoint]{jitter_fcst}()}.}

\item{obs_param}{The name of the parameter to be used for reading
observations data. If NULL, `param` is used.}

\item{obs_scaling}{Any scaling to apply to the observations data. Should be set
with \code{\link{make_scaling}()}.}

\item{obs_min, obs_max}{The minimum and maximum values that an observation can
have - used in the gross error check at read time, so should be in the same
units as in the observations file.}

\item{obs_error_sd}{The maximum number of standard deviations that an
observation can be different from a forecast. Used as a sort of
represntativeness check. See
\code{\link[harpPoint]{check_obs_against_fcst}()} for more details.}

\item{verif_groups}{The groups for which to compute verification scores. That
is to say the stratification of the verification scores.
\code{\link[harpCore]{make_verif_groups}()} can be used to define the
verification groups. The default is for the verification to be grouped by
lead time.}

\item{verif_thresholds}{The thresholds to be used for computing contingency
table based and probabilistic scores for the parameter. If different
thresholds are to be used with different comparators, `thresholds` should
be a list with the same length as `verif_comparator`.}

\item{verif_comparator}{The comparator used to determine how the thresholds
define classes. By default this is `"ge"` for >=. Can also be `"lt"`, `"le"`,
`"eq"`, `"gt"`, `"between"`, or `"outside"`.}

\item{verif_comp_inc_low, verif_comp_inc_high}{For the `"between"` and
`"outside"` comparators, whether to include the lowest and highest values
in the range.}

\item{verif_circle}{For cyclic parameters, like wind direction, the distance
around the circle in the units of the parameter. So, for degrees this would
be `360` and radians `2 * pi`.}

\item{verif_members}{Whether to verify the members individually as
deterministic forecasts for ensemble forecasts.}

\item{vertical_coordinate}{For upper air parameters, the coordinate system
used in the vertical. Can be `"pressure"`, `"height"`, or `"model"`.}
}
\value{
A list of options for a parameter.
}
\description{
`make_verif_param()` makes a list of options for a verification parameter to
be passed to \code{\link{run_point_verif}()}. At a minimum the parameter
name is required. Other options including different names for reading the
parameter from forecasts and observations; scaling; jittering; groups,
thresholds and comparators for verification can be set here.
}
\details{
Multiple parameters can be defined by wrapping calls to `make_verif_param()`
in `c()`, i.e. `c(make_verif_param(...), make_verif_param(...)`.
}
\examples{
make_verif_param("T2m")

# Add scaling for forecasts and observations
make_verif_param(
  "T2m",
  fcst_scaling = make_scaling(-273.15, "degC"),
  obs_scaling  = make_scaling(-273.15, "degC")
)

# Different names reading forecasts and observations
make_verif_param(
  "2m temperature",
  fcst_param = "T2m",
  obs_param  = "T2m"
)

# Make thresholds for wind direction with the major directions in the
# middle of the class
make_verif_param(
  "D10m",
  verif_thresholds    = list(seq(22.5, 337.5, 45), c(22.5, 337.5)),
  verif_comparator    = c("between", "outside"),
  verif_comp_inc_low  = c(TRUE, FALSE),
  verif_comp_inc_high = c(FALSE, TRUE),
  verif_circle        = 360
)

# Groups for different time groups and other stratifications
make_verif_param(
  "T2m",
   verif_groups = make_verif_groups(
     c("lead_time", "valid_dttm", "valid_hour"),
     c("fcst_cycle", "station_group")
   )
)

# Make multiple parameters
c(
  make_verif_param("T2m", verif_thresholds = seq(-25, 35, 5)),
  make_verif_param("S10m", verif_thresholds = c(1, 2, 4, 8)),
  make_verif_param(
    "CCtot", verif_thresholds = seq(0, 8), verif_comparator = "eq"
  ),
  make_verif_param("T", vertical_coordinate = "pressure")
)
}
